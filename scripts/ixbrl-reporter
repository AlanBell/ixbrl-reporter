#!/usr/bin/env python3

"""Parses account data and emits iXBRL.
"""

from ixbrl_reporter.config import Config

import ixbrl_reporter.accounts as accounts
from ixbrl_reporter.taxonomy import Taxonomy
import sys
from ixbrl_reporter.data_source import DataSource
import argparse

parser = argparse.ArgumentParser(
    description=__doc__
)
parser.add_argument('--config', '-c', default="config.yaml",
                    help='Input configuration (default: config.yaml)')
parser.add_argument('--report', '-r',
                    help='Specifies to produce a report from this element (default: report')
parser.add_argument('--show-computations', '-S', action='store_true',
                    help='Specifies to show computation values')
parser.add_argument('--format', '-f',
                    default="ixbrl",
                    help="Output format, one of: text, html, ixbrl (default: ixbrl)")

# Parse arguments
args = parser.parse_args(sys.argv[1:])

try:

    cfg = Config.load(args.config)
    cfg.set("internal.software-name", "ixbrl-reporter")
    cfg.set("internal.software-version", "1.0.2")

    kind = cfg.get("accounts.kind")
    file = cfg.get("accounts.file")

    cls = accounts.get_class(kind)
    session = cls(file)

    d = DataSource(cfg, session)

    if args.report:

        elt = d.get_element(args.report)

        if args.format == "ixbrl":
            tx_cfg = cfg.get("report.taxonomy")
            tx = Taxonomy(tx_cfg, d)
            elt.to_ixbrl(tx, sys.stdout)
        elif args.format == "html":
            tx_cfg = cfg.get("report.taxonomy")
            tx = Taxonomy(tx_cfg, d)
            elt.to_html(tx, sys.stdout)
        elif args.format == "text":
            tx_cfg = cfg.get("report.taxonomy")
            tx = Taxonomy(tx_cfg, d)
            elt.to_text(tx, sys.stdout)
        elif args.format == "debug":
            tx_cfg = cfg.get("report.taxonomy")
            tx = Taxonomy(tx_cfg, d)
            elt.to_debug(tx, sys.stdout)
        else:
            raise RuntimeError("Output type '%s' not known." % args.format)

    elif args.show_computations:

        periods = d.get_periods()

        for p in periods:
            print(p)

            comps = d.perform_computations(p)

            for id, value in comps.items():

                if isinstance(value.value, float):
                    val = round(value.value, 2)
                else:
                    val = value.value

                print("  %-40s %s" % (id, val))

    else:
        raise RuntimeError("Must specify one of --report or --show... options")

except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))
    sys.exit(1)

